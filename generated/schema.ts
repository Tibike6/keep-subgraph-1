// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class TBTCDepositToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TBTCDepositToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TBTCDepositToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TBTCDepositToken", id.toString(), this);
  }

  static load(id: string): TBTCDepositToken | null {
    return store.get("TBTCDepositToken", id) as TBTCDepositToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get deposit(): string {
    let value = this.get("deposit");
    return value.toString();
  }

  set deposit(value: string) {
    this.set("deposit", Value.fromString(value));
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get mintedAt(): BigInt {
    let value = this.get("mintedAt");
    return value.toBigInt();
  }

  set mintedAt(value: BigInt) {
    this.set("mintedAt", Value.fromBigInt(value));
  }

  get isBurned(): boolean {
    let value = this.get("isBurned");
    return value.toBoolean();
  }

  set isBurned(value: boolean) {
    this.set("isBurned", Value.fromBoolean(value));
  }

  get burnedAt(): BigInt | null {
    let value = this.get("burnedAt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set burnedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("burnedAt");
    } else {
      this.set("burnedAt", Value.fromBigInt(value as BigInt));
    }
  }
}

export class TBTCToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TBTCToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TBTCToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TBTCToken", id.toString(), this);
  }

  static load(id: string): TBTCToken | null {
    return store.get("TBTCToken", id) as TBTCToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get mintedAt(): BigInt {
    let value = this.get("mintedAt");
    return value.toBigInt();
  }

  set mintedAt(value: BigInt) {
    this.set("mintedAt", Value.fromBigInt(value));
  }

  get burnedAt(): BigInt | null {
    let value = this.get("burnedAt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set burnedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("burnedAt");
    } else {
      this.set("burnedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get isBurned(): boolean {
    let value = this.get("isBurned");
    return value.toBoolean();
  }

  set isBurned(value: boolean) {
    this.set("isBurned", Value.fromBoolean(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Deposit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Deposit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Deposit", id.toString(), this);
  }

  static load(id: string): Deposit | null {
    return store.get("Deposit", id) as Deposit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tbtcSystem(): Bytes {
    let value = this.get("tbtcSystem");
    return value.toBytes();
  }

  set tbtcSystem(value: Bytes) {
    this.set("tbtcSystem", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get tbtcToken(): string | null {
    let value = this.get("tbtcToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tbtcToken(value: string | null) {
    if (value === null) {
      this.unset("tbtcToken");
    } else {
      this.set("tbtcToken", Value.fromString(value as string));
    }
  }

  get currentState(): string | null {
    let value = this.get("currentState");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currentState(value: string | null) {
    if (value === null) {
      this.unset("currentState");
    } else {
      this.set("currentState", Value.fromString(value as string));
    }
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (value === null) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(value as BigInt));
    }
  }

  get keepAddress(): Bytes | null {
    let value = this.get("keepAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set keepAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("keepAddress");
    } else {
      this.set("keepAddress", Value.fromBytes(value as Bytes));
    }
  }

  get lotSizeSatoshis(): BigInt | null {
    let value = this.get("lotSizeSatoshis");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lotSizeSatoshis(value: BigInt | null) {
    if (value === null) {
      this.unset("lotSizeSatoshis");
    } else {
      this.set("lotSizeSatoshis", Value.fromBigInt(value as BigInt));
    }
  }

  get initialCollateralizedPercent(): i32 {
    let value = this.get("initialCollateralizedPercent");
    return value.toI32();
  }

  set initialCollateralizedPercent(value: i32) {
    this.set("initialCollateralizedPercent", Value.fromI32(value));
  }

  get collateralizationPercent(): i32 {
    let value = this.get("collateralizationPercent");
    return value.toI32();
  }

  set collateralizationPercent(value: i32) {
    this.set("collateralizationPercent", Value.fromI32(value));
  }

  get undercollateralizedThresholdPercent(): i32 {
    let value = this.get("undercollateralizedThresholdPercent");
    return value.toI32();
  }

  set undercollateralizedThresholdPercent(value: i32) {
    this.set("undercollateralizedThresholdPercent", Value.fromI32(value));
  }

  get severelyUndercollateralizedThresholdPercent(): i32 {
    let value = this.get("severelyUndercollateralizedThresholdPercent");
    return value.toI32();
  }

  set severelyUndercollateralizedThresholdPercent(value: i32) {
    this.set(
      "severelyUndercollateralizedThresholdPercent",
      Value.fromI32(value)
    );
  }

  get signerFee(): BigInt | null {
    let value = this.get("signerFee");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set signerFee(value: BigInt | null) {
    if (value === null) {
      this.unset("signerFee");
    } else {
      this.set("signerFee", Value.fromBigInt(value as BigInt));
    }
  }

  get utxoSize(): BigInt | null {
    let value = this.get("utxoSize");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set utxoSize(value: BigInt | null) {
    if (value === null) {
      this.unset("utxoSize");
    } else {
      this.set("utxoSize", Value.fromBigInt(value as BigInt));
    }
  }

  get remainingTerm(): BigInt | null {
    let value = this.get("remainingTerm");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set remainingTerm(value: BigInt | null) {
    if (value === null) {
      this.unset("remainingTerm");
    } else {
      this.set("remainingTerm", Value.fromBigInt(value as BigInt));
    }
  }

  get auctionValue(): BigInt | null {
    let value = this.get("auctionValue");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set auctionValue(value: BigInt | null) {
    if (value === null) {
      this.unset("auctionValue");
    } else {
      this.set("auctionValue", Value.fromBigInt(value as BigInt));
    }
  }

  get bondedECDSAKeep(): string | null {
    let value = this.get("bondedECDSAKeep");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bondedECDSAKeep(value: string | null) {
    if (value === null) {
      this.unset("bondedECDSAKeep");
    } else {
      this.set("bondedECDSAKeep", Value.fromString(value as string));
    }
  }

  get depositLiquidation(): string | null {
    let value = this.get("depositLiquidation");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set depositLiquidation(value: string | null) {
    if (value === null) {
      this.unset("depositLiquidation");
    } else {
      this.set("depositLiquidation", Value.fromString(value as string));
    }
  }

  get depositRedemption(): string | null {
    let value = this.get("depositRedemption");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set depositRedemption(value: string | null) {
    if (value === null) {
      this.unset("depositRedemption");
    } else {
      this.set("depositRedemption", Value.fromString(value as string));
    }
  }
}

export class DepositLiquidation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DepositLiquidation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DepositLiquidation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DepositLiquidation", id.toString(), this);
  }

  static load(id: string): DepositLiquidation | null {
    return store.get("DepositLiquidation", id) as DepositLiquidation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get deposit(): string {
    let value = this.get("deposit");
    return value.toString();
  }

  set deposit(value: string) {
    this.set("deposit", Value.fromString(value));
  }

  get initiateTxhash(): Bytes | null {
    let value = this.get("initiateTxhash");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set initiateTxhash(value: Bytes | null) {
    if (value === null) {
      this.unset("initiateTxhash");
    } else {
      this.set("initiateTxhash", Value.fromBytes(value as Bytes));
    }
  }

  get courtesyCallTxhash(): Bytes | null {
    let value = this.get("courtesyCallTxhash");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set courtesyCallTxhash(value: Bytes | null) {
    if (value === null) {
      this.unset("courtesyCallTxhash");
    } else {
      this.set("courtesyCallTxhash", Value.fromBytes(value as Bytes));
    }
  }

  get liquidationInitiated(): BigInt | null {
    let value = this.get("liquidationInitiated");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidationInitiated(value: BigInt | null) {
    if (value === null) {
      this.unset("liquidationInitiated");
    } else {
      this.set("liquidationInitiated", Value.fromBigInt(value as BigInt));
    }
  }

  get courtesyCallInitiated(): BigInt | null {
    let value = this.get("courtesyCallInitiated");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set courtesyCallInitiated(value: BigInt | null) {
    if (value === null) {
      this.unset("courtesyCallInitiated");
    } else {
      this.set("courtesyCallInitiated", Value.fromBigInt(value as BigInt));
    }
  }

  get isLiquidated(): boolean {
    let value = this.get("isLiquidated");
    return value.toBoolean();
  }

  set isLiquidated(value: boolean) {
    this.set("isLiquidated", Value.fromBoolean(value));
  }

  get liquidatedAt(): BigInt | null {
    let value = this.get("liquidatedAt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidatedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("liquidatedAt");
    } else {
      this.set("liquidatedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get liquidationInitiator(): Bytes | null {
    let value = this.get("liquidationInitiator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set liquidationInitiator(value: Bytes | null) {
    if (value === null) {
      this.unset("liquidationInitiator");
    } else {
      this.set("liquidationInitiator", Value.fromBytes(value as Bytes));
    }
  }

  get wasFraud(): boolean {
    let value = this.get("wasFraud");
    return value.toBoolean();
  }

  set wasFraud(value: boolean) {
    this.set("wasFraud", Value.fromBoolean(value));
  }
}

export class DepositRedemption extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DepositRedemption entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DepositRedemption entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DepositRedemption", id.toString(), this);
  }

  static load(id: string): DepositRedemption | null {
    return store.get("DepositRedemption", id) as DepositRedemption | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get deposit(): string {
    let value = this.get("deposit");
    return value.toString();
  }

  set deposit(value: string) {
    this.set("deposit", Value.fromString(value));
  }

  get redeemerOutputScript(): Bytes | null {
    let value = this.get("redeemerOutputScript");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set redeemerOutputScript(value: Bytes | null) {
    if (value === null) {
      this.unset("redeemerOutputScript");
    } else {
      this.set("redeemerOutputScript", Value.fromBytes(value as Bytes));
    }
  }

  get requestedFee(): BigInt | null {
    let value = this.get("requestedFee");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestedFee(value: BigInt | null) {
    if (value === null) {
      this.unset("requestedFee");
    } else {
      this.set("requestedFee", Value.fromBigInt(value as BigInt));
    }
  }

  get latestRedemptionFee(): BigInt | null {
    let value = this.get("latestRedemptionFee");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestRedemptionFee(value: BigInt | null) {
    if (value === null) {
      this.unset("latestRedemptionFee");
    } else {
      this.set("latestRedemptionFee", Value.fromBigInt(value as BigInt));
    }
  }

  get withdrawalRequestAt(): BigInt | null {
    let value = this.get("withdrawalRequestAt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set withdrawalRequestAt(value: BigInt | null) {
    if (value === null) {
      this.unset("withdrawalRequestAt");
    } else {
      this.set("withdrawalRequestAt", Value.fromBigInt(value as BigInt));
    }
  }

  get redeemedAt(): BigInt | null {
    let value = this.get("redeemedAt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set redeemedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("redeemedAt");
    } else {
      this.set("redeemedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get lastRequestedDigest(): Bytes | null {
    let value = this.get("lastRequestedDigest");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lastRequestedDigest(value: Bytes | null) {
    if (value === null) {
      this.unset("lastRequestedDigest");
    } else {
      this.set("lastRequestedDigest", Value.fromBytes(value as Bytes));
    }
  }

  get outpoint(): Bytes | null {
    let value = this.get("outpoint");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set outpoint(value: Bytes | null) {
    if (value === null) {
      this.unset("outpoint");
    } else {
      this.set("outpoint", Value.fromBytes(value as Bytes));
    }
  }

  get utxoSize(): BigInt | null {
    let value = this.get("utxoSize");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set utxoSize(value: BigInt | null) {
    if (value === null) {
      this.unset("utxoSize");
    } else {
      this.set("utxoSize", Value.fromBigInt(value as BigInt));
    }
  }

  get txid(): Bytes | null {
    let value = this.get("txid");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txid(value: Bytes | null) {
    if (value === null) {
      this.unset("txid");
    } else {
      this.set("txid", Value.fromBytes(value as Bytes));
    }
  }
}

export class KeepMember extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save KeepMember entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save KeepMember entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("KeepMember", id.toString(), this);
  }

  static load(id: string): KeepMember | null {
    return store.get("KeepMember", id) as KeepMember | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get keeps(): Array<string> | null {
    let value = this.get("keeps");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set keeps(value: Array<string> | null) {
    if (value === null) {
      this.unset("keeps");
    } else {
      this.set("keeps", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class BondedECDSAKeep extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BondedECDSAKeep entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BondedECDSAKeep entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BondedECDSAKeep", id.toString(), this);
  }

  static load(id: string): BondedECDSAKeep | null {
    return store.get("BondedECDSAKeep", id) as BondedECDSAKeep | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get keepAddress(): Bytes {
    let value = this.get("keepAddress");
    return value.toBytes();
  }

  set keepAddress(value: Bytes) {
    this.set("keepAddress", Value.fromBytes(value));
  }

  get deposit(): string {
    let value = this.get("deposit");
    return value.toString();
  }

  set deposit(value: string) {
    this.set("deposit", Value.fromString(value));
  }

  get totalBondAmount(): BigInt | null {
    let value = this.get("totalBondAmount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalBondAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("totalBondAmount");
    } else {
      this.set("totalBondAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get publicKey(): Bytes | null {
    let value = this.get("publicKey");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set publicKey(value: Bytes | null) {
    if (value === null) {
      this.unset("publicKey");
    } else {
      this.set("publicKey", Value.fromBytes(value as Bytes));
    }
  }

  get status(): string | null {
    let value = this.get("status");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (value === null) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(value as string));
    }
  }

  get honestThreshold(): i32 {
    let value = this.get("honestThreshold");
    return value.toI32();
  }

  set honestThreshold(value: i32) {
    this.set("honestThreshold", Value.fromI32(value));
  }

  get members(): Array<string | null> {
    let value = this.get("members");
    return value.toStringArray();
  }

  set members(value: Array<string | null>) {
    this.set("members", Value.fromStringArray(value));
  }
}
